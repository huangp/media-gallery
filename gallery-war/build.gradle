plugins {
    id 'net.nemerosa.versioning' version '1.6.0'
    id "org.akhikhl.gretty" version "1.2.4"
}

apply plugin: 'war'

// get rid of the goddamn transitive dependency from zanata-client-command (old version of javassist)
//configurations.compile.exclude group: 'javassist', module: 'javassist'

configurations {
    liveWarLibs
}

gretty {
  // supported values:
  // 'jetty7', 'jetty8', 'jetty9', 'tomcat7', 'tomcat8'
  servletContainer = 'jetty8'
  port= 8081
  contextPath = ''
  scanInterval = 0
    webappCopy {
        // TODO we need to let users to use an system property or something
        filesMatching 'WEB-INF/jetty-env.xml', {
            filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
                jdbcUrl: 'jdbc:h2:mem:media-gallery'
            ])
        }
    }
}

def jerseyVersion = "2.22.1"

description = 'Media Gallery web app'
dependencies {
//    compile group: 'org.slf4j', name: 'jcl-over-slf4j', version:'1.7.13'
    compile group: 'net.bull.javamelody', name: 'javamelody-core', version:'1.58.0'

    // CDI
    compile 'org.jboss.weld.servlet:weld-servlet:2.3.2.Final'
    compile 'javax:javaee-web-api:7.0'
    compile 'javax.enterprise:cdi-api:1.2'
    compile 'org.jboss:jandex:2.0.1.Final'


    // jax-rs
    compile "javax.ws.rs:javax.ws.rs-api:2.0.1"
    compile "org.glassfish.jersey.containers:jersey-container-servlet:$jerseyVersion"
    compile 'org.glassfish.hk2.external:javax.inject:2.5.0-b03'
    compile "org.glassfish.jersey.core:jersey-server:$jerseyVersion"
    compile "org.glassfish.jersey.ext.cdi:jersey-cdi1x:$jerseyVersion"
    compile "org.glassfish.jersey.ext.cdi:jersey-cdi1x-servlet:$jerseyVersion"
    compile 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.7.0'

    // validation
    compile 'javax.validation:validation-api:1.0.0.GA'
    compile 'org.hibernate:hibernate-validator:4.3.2.Final'

    // database
//    compile project(':database')
//    compile 'javax.persistence:persistence-api:1.0.2'
    compile 'com.h2database:h2:1.4.191'
    compile 'com.mchange:c3p0:0.9.5.2'
    compile 'org.liquibase:liquibase-core:3.4.2'

    // utilities
    compile group: 'com.google.guava', name: 'guava', version:'19.0'
//    compile group: 'org.scannotation', name: 'scannotation', version:'1.0.3'
//    compile group: 'org.javassist', name: 'javassist', version:'3.20.0-GA'
//    compile group: 'commons-codec', name: 'commons-codec', version:'1.10'
//    compile group: 'org.apache.commons', name: 'commons-lang3', version:'3.4'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version:'2.7.0'
//    compile group: 'org.quartz-scheduler', name: 'quartz', version:'2.2.2'
    compile group: 'org.yaml', name: 'snakeyaml', version:'1.16'
//    providedCompile group: 'org.projectlombok', name: 'lombok', version:'1.16.6'
    providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version:'3.1.0'

    compile group: 'org.slf4j', name: 'slf4j-api', version:'1.7.13'
    compile group: 'org.slf4j', name: 'log4j-over-slf4j', version:'1.7.13'
    compile group: 'ch.qos.logback', name: 'logback-core', version:'1.1.3'
    compile group: 'ch.qos.logback', name: 'logback-classic', version:'1.1.3'

    // elastic search
//    test-framework-jar must before lucene core
    testCompile 'com.carrotsearch.randomizedtesting:randomizedtesting-runner:2.1.16'
    testCompile 'org.apache.lucene:lucene-test-framework:4.10.4'
    testCompile 'org.elasticsearch:elasticsearch:1.7.2@test-jar'
    compile 'org.elasticsearch:elasticsearch:1.7.2'

    // jetty-server
    liveWarLibs (project(path: ':jetty-server-jar', configuration: 'shadow'))
    // main class
    liveWarLibs project(':server-bootstrap')
}

processResources {
    filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
        version: version,
        build: versioning.info.full
    ])
}

task explodedWar(type: Copy) {
    into "$buildDir/exploded"
    with war
}

task liveWarExploded(dependsOn: [war, ':jetty-server-jar:shadowJar', ':server-bootstrap:build']) {
    def liveWarDir = "${buildDir}/livewar"
    def serverBootstrapJar = new File(project(':server-bootstrap').buildDir, "libs/server-bootstrap-${version}.jar")
    def jettyServerUberJar = new File(project(':jetty-server-jar').buildDir, "libs/jetty-server-jar-${version}-all.jar")


    doLast {
        copy {
            from zipTree(serverBootstrapJar);
            into liveWarDir
        }
        copy {
            from zipTree(jettyServerUberJar)
            into "${buildDir}/livewar/WEB-INF/jetty-server"
        }
        copy {
            from("$buildDir/exploded") {
                exclude '**/jetty-server-*.jar', '**/server-bootstrap-*.jar', "**/MANIFEST.MF", "**/jetty-env.xml"

            }
            into "${buildDir}/livewar"
        }
    }
}

task liveWar(dependsOn: liveWarExploded, type: Zip) {
    from("$buildDir/livewar")
    baseName "livewar"
    extension "war"
}

war.dependsOn explodedWar
